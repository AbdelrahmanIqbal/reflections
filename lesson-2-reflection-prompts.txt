What happens when you initialize a repository? Why do you need to do it?
-.git directory is created and ready to control changes

How is the staging area different from the working directory and the repository?
What value do you think it offers?
- an area between working directory and repository to prepare changes for commit
- a way to roll back unnecessary changes

How can you use the staging area to make sure you have one commit per logical
change?
- Only staged files can be commited.
- A file can exist only once in the staging area

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
-build beta versions of the game without affecting stable version
-can easily roll back to the stable version

How do the diagrams help you visualize the branch structure?
-Hell, no question it does in every way.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
- Both branches are in the same state
- Commit log history is merged into one.
- Diagrams illustrate pathways of branches, when they split, and when they meet up.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
